---
title: "Waves"
author: "James J. Herlan"
editor: visual
---

```{r echo = TRUE, include = FALSE}
require(tidyverse)
require(vegan)
require(knitr)
require(fpc)
require(cluster)
require(purrr)
require(factoextra)
require(pander)
require(ggridges)
require(readr)
```

```{r, include = FALSE}
am_sam_tut_hsig.main <- readr::read_csv("am_sam_tut_hsig.csv")
```

```{r}
#show a part of the data
kable(am_sam_tut_hsig.main[1:10, 1:10], caption = "")
```

```{r, include = FALSE}
hsig.main <-
  am_sam_tut_hsig.main %>%
  mutate_at(vars(site), factor) %>%
  pivot_longer(cols = hsig1:hsig500, names_to = 'hsig', values_to = 'wave')
```

```{r, include = FALSE}
ggplot(hsig.main, aes(x = wave, y = site, fill = stat(x))) +
  geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01) +
  scale_fill_viridis_c(name = "hsig", option = "m") +
  labs(title = 'Significant Wave Height, Tutuila, Americna Samoa')
```

```{r, include = FALSE}
am_sam_tut_hsig.mat <- read_csv("am_sam_tut_hsig.csv") %>%
  column_to_rownames(var = "site") %>%
  as.matrix()
```

```{r, include = FALSE}
tut_sh.table <- as.table(am_sam_tut_hsig.mat)
```

#### Classifying the significant wave height at shallow reefs at Tutuila, American Samoa

```{r, include = FALSE}
head(tut_sh.table)
```

```{r}
dist_meth = c("euclidean", "manhattan", "bray", "jaccard")
```

```{r}
dist_m = map(as.list(dist_meth), vegdist, x = tut_sh.table)
```

1.  Determine the optimal number of clusters to use
2.  Define function find_k for plotting scree plot to show how within groups sum of square (WSS) and average Silhouette width (Si) change with different number of clusters used.

```{r}
find_k <- function(data, plot_title = ""){
  #create data for within group sum of square
  wss = numeric(15)
  for (k in 1:15) wss[k] <- kmeans(data, k, nstart = 20)$tot.withinss
  
  #create data for average silhouette distance
  asw <- numeric(15)
  for (k in 2:15) asw[k] <- pam(data, k)$silinfo$avg.width
  
  #create s cree plot
  par(mar=c(5, 4, 4, 6))
  plot(1:15, wss, type = "b", main = plot_title, xlab = "Number of Clusters", ylab = "Within groups sum of squares")
  par(new = T)
  plot(1:15, asw, type = "l", lty = 2, col = "red", axes = F, xlab = NA, ylab = NA)
  axis(side = 4)
  mtext("Average Silhouette width", side = 4, line = 3)
  legend("topright", legend = c("WSS", "Si"), lty = c(1,2), col = c("black", "red"))
}
```

1.  Scree plots
2.  Define plot titles

```{r}
dist_meas = c("Euclidean", "Manhattan", "Bray-Curtis", "Jaccard")
```

Create scree plots to determine the number of clusters to use (k). Click on the tabs to show results for different distance methods.

We show a scatter plot in this section.

#### Plots

::: panel-tabset
```{r, results = "asis"}
for(i in 1:4){
  cat("\n")
  cat("#### ", dist_meas[i], "{.tabset}\n")
  find_k(dist_m[[i]], plot_title = dist_meas[i])
  cat("\n")
}
```
:::

#### Perform k-means clustering to analyze the clusters of stations

##### Conduct k-means to find clusters

```{r}
km = map(dist_m, pam, k = 2)
```

##### Extract cluster data

```{r}
km_result = transpose(km)
```

```{r}
km_cluster = as.data.frame(km_result$cluster)
```

```{r}
colnames(km_cluster) <- dist_meas
```

### **Silhoulette plots: results for k-means clustering**

##### Plot the Silhouette plots for k-means clustering.

###### Click on the tabs to see results for different distance methods.

::: panel-tabset
```{r, results = "asis"}
for(i in 1:4){
  cat("\n")
  cat("#### ", dist_meas[i], "{.tabset}\n")
  plot(silhouette(km[[i]], dist_m[[i]]), main = paste("Silhoulette plot using ", dist_meas[i], " distance") , col = 1:2, border = NA, cex = 0.6)
  cat("\n")
}
```
:::

### **Clusters stability: *k-means*** 

##### Using the bootstrap method, assess the stability of clusters when using k-means.

###### Click on different tabs to see results for different distance methods.

::: panel-tabset
```{r, results = "asis"}
for(i in 1:4){
  cat("\n")
  cat("#### ", dist_meas[i], "{.tabset}\n")
  stab = clusterboot(dist_m[[i]], B = 1000, bootmethod = "boot", clustermethod = claraCBI, k = 2, count = F)
  stab_results = cbind(stab$bootmean, stab$bootbrd, stab$bootrecover)
  print(kable(stab_results, col.names = c("Clusterwise Jaccard bootstrap mean", "dissolved", "recovered"), caption = "Cluster stability assessment for k-means"))
  cat("\n")
}
```
:::

1.  Perform hierarchical clustering to analyze the clusters of stations
2.  Perform hierarchical clustering on different distance measures and linkage methods

```{r}
hc_agg = list()
m1 = list(method = list("single", "complete", "average", "ward"))
m2 = list(method = list("single", "complete", "average", "ward.D"))
for(i in 1:4){
  hc_agg[[i]] = pmap(m1, agnes, x = dist_m[[i]])
}
```

#### **Dendrogram: results for hierarchical clustering**

##### Define plot titles

```{r}
link_meth = c("Single", "Complete", "Average",  "Ward's")
```

##### Plot the dendrograms for hierarchical clustering.

###### Click on different tabs to see results for different distance methods with different linkage methods.

::: {.panel-tabset}

```{r}
#| results: asis
for(i in 1:4) 
  {
  cat("#### ", dist_meas[i], "\n")
  for(j in 1:4){
    cat("\n")
    cat("##### ", link_meth[j], "\n")
    print(fviz_dend(hc_agg[[i]][[j]], cex = 0.5, k = 2, lwd = 0.8, main = paste(link_meth[j], "linkage Dendrogram"), horiz = T, ylab = paste("Height", "\n", "\n", "Agglomerative coefficient=", round(hc_agg[[i]][[j]]$ac, 2), "\n", "Cophenetic correlation=", round(cor(dist_m[[i]], cophenetic(hc_agg[[i]][[j]])), 2))))
    cat("\n")
  }
  cat("\n") 
  }
```

#### Clusters stability: hierarchical clustering

##### Using the bootstrap method, assess the stability of clusters when using hierarchical clustering.

###### Click on different tabs to see results for different distance methods with different linkage methods.

::: panel-tabset
```{r}
#| results: asis
for(i in 1:4){
  cat("#### ", dist_meas[i], "\n")
  for(j in 1:4){
    cat("\n")
    cat("##### ", link_meth[j], "\n")
    stab = clusterboot(dist_m[[i]], B = 1000, bootmethod = "boot", clustermethod = hclustCBI, k = 2, method = m2[[1]][[j]], count = F)
    stab_results = cbind(stab$bootmean, stab$bootbrd, stab$bootrecover)
    print(kable(stab_results, 
                col.names = 
                c("Clusterwise Jaccard bootstrap mean", "dissolved", "recovered"), 
                caption = "Cluster stability assessment for hierarchical clustering"))
    cat("\n")
  }
  cat("\n")
}
```
:::

### Cluster analysis result

##### Report stations in different group

##### Extract indice for cluster from result of heirarchical clustering using -- and --

###### **The following does not work!!**

```{r}
clust = cutree(hc_agg[[4]][[4]], 2)
```

##### Subset station data according to the clusters

```{r}
g = list()
```

```{r}
clust_name = c()
```

```{r}
for(i in 1:2){
  g[[i]] = subset(tut_sh.table, clust == i)
  clust_name[i] = paste(rownames(g[[i]]), collapse = " ")
}
```

##### Display the clusters

```{r}
clust_name = data.frame(clust_name)
```

```{r}
colnames(clust_name) <- "Stations"
```

```{r}
rownames(clust_name) <- c("Group 1", "Group 2")
```

```{r}
pander(clust_name, split.cell = 35)
```

##### Compare copepod composition in the 2 clusters

##### Compute average composition percentage for every copepod for each group

```{r}
# g_mean = map(g, apply, MARGIN = 2, FUN = mean)
```

```{r}
# kable(data.frame(g_mean), col.names = c("Group 1", "Group 2"))
```

```{r}
# dom_species_name <- rownames(data.frame(g_mean))
```

```{r}
# dom_g1 = dom_species_name[g_mean[[1]] > g_mean[[2]] + g_mean[[3]]]
# dom_g2 = dom_species_name[g_mean[[2]] > g_mean[[1]] + g_mean[[3]]]
# dom_g3 = dom_species_name[g_mean[[3]] > g_mean[[1]] + g_mean[[2]]]
```

#### More *k*-means

```{r}
distance <- get_dist(tut_sh.table)
```

```{r}
fviz_dist(distance, gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
```

```{r, include = FALSE}
am_sam_tut_hsig.main <- read.csv("am_sam_tut_hsig.csv")
```

```{r}
am_sam_tut_hsig.main
```

```{r, include = FALSE}
am_sam_tut_hsig.df <- read.csv("am_sam_tut_hsig.csv") %>%
  column_to_rownames(var = "site")
```

```{r}
k2 <- kmeans(am_sam_tut_hsig.df, centers = 2, nstart = 25)
```

```{r}
str(k2)
```

```{r}
k2
```

\#`{r} #fviz_cluster(k2, data = am_sam_tut_hsig.df) #`

```{r}
am_sam_tut_hsig.df %>%
  as_tibble() %>%
  mutate(cluster = k2$cluster,
         site = row.names(am_sam_tut_hsig.main)) %>%
  ggplot(aes(hsig1, hsig2, color = factor(cluster), label = site)) +
  geom_text()
```
